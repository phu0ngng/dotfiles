# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "screen-256color"
#set -g default-terminal "tmux-256color"
#set-option -g default-shell /bin/sh #If some weird extis are happening try this.
set-option -g default-shell /bin/bash #If some weird extis are happening try this.
#Run bash as default-shell
set-option -g default-command /bin/bash

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Screen like binding
#unbind C-b
set -g prefix C-b
bind b send-prefix
#bind for nested commands n for nested
bind-key -n C-b send-prefix

# No escape time for vi mode
set -sg escape-time 0

# Screen like binding for last window
#unbind l
#bind C-a last-window

# Bigger history
set -g history-limit 10000

# New session *
bind * new

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"
#Weird environment with tmux env and shell env
bind R if-shell -b '[ "$TERMCOLORHUE" = "light" ]' "set-environment TERMCOLORHUE dark ; display 'toggle $TERMCOLORHUE'" " set-environment TERMCOLORHUE light ; display 'toggle $TERMCOLORHUE' " \; source-file ~/.tmux.conf

setw -g automatic-rename on

#ask for newer tmux if errors (or install own!)

bind c new-window -c '#{pane_current_path}'
if-shell -b '[ "$(echo "$TMUX_VERSION < 3.4" | bc)" = 1]' "\
		bind-key v split-window -h -p 50 -c '#{pane_current_path}'; \
		bind-key ^V split-window -h -p 50 -c '#{pane_current_path}'; \
		bind-key s split-window -v -p 50 -c '#{pane_current_path}'; \
		bind-key ^S split-window -v -p 50 -c '#{pane_current_path}'; \
		"
		if-shell -b '[ "$(echo "$TMUX_VERSION >= 3.4" | bc)" = 1 ]' "\
			bind-key v split-window -h -l 50\% -c '#{pane_current_path}';\
			bind-key ^V split-window -h -l 50\% -c '#{pane_current_path}';\
			bind-key s split-window -v -l 50\% -c '#{pane_current_path}';\
			bind-key ^S split-window -v -l 50\% -c '#{pane_current_path}';\
			"
# Above conditionals do not work. Escaping is wrong.
			bind c new-window -c '#{pane_current_path}'
			bind-key v split-window -h -l 50% -c '#{pane_current_path}'
			bind-key ^V split-window -h -l 50% -c '#{pane_current_path}'
			bind-key s split-window -v -l 50% -c '#{pane_current_path}'
			bind-key ^S split-window -v -l 50% -c '#{pane_current_path}'


#tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
			run-shell 'tmux setenv -g tmux_version $(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
			if-shell -b '[ "$(echo "$tmux_version > 1.85" | bc)" = 1 ]' "set -g mouse on"
			set -g mouse on

# Moving internal with C-a hjkl and external with C-b [hjkl] for explicit movement
			bind -r h select-pane -L
			bind -r j select-pane -D
			bind -r k select-pane -U
			bind -r l select-pane -R

			bind-key G resize-pane -L -x 85

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
			bind -r H resize-pane -L 5
			bind -r J resize-pane -D 5
			bind -r K resize-pane -U 5
			bind -r L resize-pane -R 5

# Split window to new pane and merge pane to other pane
#bind
			bind-key ! break-pane
#capital V to move horizontal
			bind-key V display-panes \; command-prompt -p "move(h) pane to (window.pane):"  "move-pane -h -t '%%'"
#capital S to move vertical
			bind-key S display-panes \; command-prompt -p "move(v) pane to (window.pane):"  "move-pane -v -t '%%'"
			bind-key Space display-panes \; command-prompt -p "swap pane to (window.pane):" "swap-pane -t '%%'"

			bind-key T next-layout

#set -g status-keys vi
#set-window-option -g mode-keys vi

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
			is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
				| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
				bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
				bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
				bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
				bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
				tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
				if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
					"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
					if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
						"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"


						run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6- | sed 's/[^0-9.]*//g' )"
						if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1]' \
							"bind-key -T copy-mode-vi C-h select-pane -L; \
							bind-key -T copy-mode-vi C-j select-pane -D; \
							bind-key -T copy-mode-vi C-k select-pane -U; \
							bind-key -T copy-mode-vi C-l select-pane -R; \
							bind-key -T copy-mode-vi C-\ select-pane -l; \
							"
							if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1]' "\
								bind -t vi-copy C-h select-pane -L; \
								bind -t vi-copy C-j select-pane -D; \
								bind -t vi-copy C-k select-pane -U; \
								bind -t vi-copy C-l select-pane -R; \
								bind -t vi-copy C-\ select-pane -l; \
								"

# fix pbcopy/pbpaste
								if-shell "if  [[ 'uname' == 'Darwin'  ]]; then true; else false; fi" \
									'if "command -v reattach-to-user-namespace >/dev/null" "set -gq @osx-pasteboard true" ; \
									if "tmux show -gv @osx-clipboard" "set -g default-command `reattach-to-user-namespace -l $SHELL`" ; \
									set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL" \
									'
# Patch for OS X pbpaste and pbcopy under tmux.

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
									bind e setw synchronize-panes on
									bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
									set -g base-index 1
									setw -g pane-base-index 1

#set -g message-style fg=black,bg=yellow,bright;
#set -g message-command-style fg=blue,bg=black;
#set -g pane-active-border-style fg=colour39;
#set -g pane-border-style fg=colour245;
#set -g status-style fg=white,bg=colour234;


# color scheme (styled as vim-powerline)
									set -g status-left-length 52
									set -g status-right-length 451
									set -g status-right "@#(hostname -f | cut -d "." -f -2) %H:%M %d-%b-%y"
#if-shell -b 'condition 0 or 1' 'command when true' 'command when false'
									if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" -eq 1 -a "$TERMCOLORHUE" = "light" ]' \
										'set -g message-style fg=colour44,bg=black,bright; \
										set -g mode-style fg=colour18,bg=yellow,bright; \
										set -g message-command-style fg=colour46,bg=black; \
										set -g pane-active-border-style fg=colour81; \
										set -g pane-border-style fg=colour250;  \
										set -g status-style fg=colour0,bg=colour252; '
#    set -g mode-style fg=colour123,bg=color245; \
#   set -g choose-sesseion fg=bolour123,bg=color245; \
#   set -g choose-window fg=kolour123,bg=color245; '

										if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" -eq 1 -a "$TERMCOLORHUE" = "light" ]' \
											'set -g message-fg black; \
											set -g message-bg yellow;  \
											set -g message-attr bold;  \
											set -g message-command-fg blue;  \
											set -g message-command-bg black;  \
											set -g pane-active-border-fg colour81;  \
											set -g pane-border-fg colour250;  \
											set -g status-fg colour0;  \
											set -g status-bg colour252; '



											if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" -eq 1 -a "$TERMCOLORHUE" = "dark" ]' \
												'set -g message-style fg=colour233,bg=yellow,bright; \
												set -g message-command-style fg=blue,bg=black; \
												set -g pane-active-border-style fg=colour39; \
												set -g pane-border-style fg=colour245;  \
												set -g status-style fg=colour15,bg=colour234; '

#Keep this
												if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" -eq 1 -a "$TERMCOLORHUE" = "dark" ]' \
													'set -g message-fg black; \
													set -g message-bg yellow;  \
													set -g message-attr bold;  \
													set -g message-command-fg blue;  \
													set -g message-command-bg black;  \
													set -g pane-active-border-fg colour39;  \
													set -g pane-border-fg colour245;  \
													set -g status-fg white;  \
													set -g status-bg colour234; '




#if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1]' \


													set -g status-left '#[fg=colour235,bg=colour252,bold] #S/#(tmux ls | wc -l | xargs) #[fg=colour252,bg=colour238,nobold]#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]'
													set -g window-status-format "#[fg=colour244,bg=colour234,bold] #I #W "
													set -g window-status-current-format "#[fg=colour235,bg=colour152,noreverse,bold] #I #W #[fg=colour250,bg=colour234,nobold]"

													if-shell -b '[ "$TERMCOLORHUE" = "dark" ] ' \
														'set -g status-left "#[fg=colour235,bg=colour244,bold] #S/#(tmux ls | wc -l | xargs) #[fg=colour252,bg=colour238,nobold]#[fg=colour248,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour244,nobold]"; \
														set -g window-status-format "#[fg=colour244,bg=colour234,bold] #I #W "; \
														set -g window-status-current-format "#[fg=colour15,bg=colour234,noreverse,bold] #I #W #[fg=colour255,bg=colour234,nobold]"; '

														if-shell -b '[ "$TERMCOLORHUE" = "light" ] ' \
															'set -g status-left "#[fg=colour250,bg=colour239,bold] #S/#(tmux ls | wc -l | xargs) #[fg=colour250,bg=colour238,nobold]#[fg=colour249,bg=colour242,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]"; \
															set -g window-status-format "#[fg=colour245,bg=colour252,bold] #I #W "; \
															set -g window-status-current-format "#[fg=colour235,bg=colour252,noreverse,bold] #I #W #[fg=colour15,bg=colour234,nobold]"; '



# loud or quiet?
															set-option -g visual-activity off
															set-option -g visual-bell off
															set-option -g visual-silence off
															set-window-option -g monitor-activity off
															set-option -g bell-action none

															color_status_text="colour155"
															color_window_off_status_bg="colour234" #Bar
															color_light="colour153" #lime?
															color_dark="colour232"  #Black
															color_window_off_status_current_bg="colour254" # Gray

															TMUX_nest_level=0

															bind -T root F10  \
																set prefix None \;\
																set key-table off \;\
																set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
																set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
																set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
																if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
																refresh-client -S
#  run-shell "export TMUX_nest_level=$(echo ${TMUX_nest_level} + 1 | bc)" \;\

#  if-shell '[[ ${TMUX_nest_level} -leq 1 ]]' \ 
#  '\ 
																bind -T off F9 \
																	set -u prefix \;\
																	set -u key-table \;\
																	set -u status-style \;\
																	set -u window-status-current-style \;\
																	set -u window-status-current-format \;\
																	refresh-client -S
#  run-shell "export TMUX_nest_level=0" \;\
#' \
#  'run-shell "export TMUX_nest_level=$(echo ${TMUX_nest_level} - 1 | bc)"' \;\ 


																	wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

# Local config
